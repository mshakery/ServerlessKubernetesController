// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: horizontalPodAutoscaler.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HorizontalPodAutoscaler_Scale_FullMethodName = "/kubernetes.HorizontalPodAutoscaler/Scale"
)

// HorizontalPodAutoscalerClient is the client API for HorizontalPodAutoscaler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HorizontalPodAutoscalerClient interface {
	Scale(ctx context.Context, in *HpaName, opts ...grpc.CallOption) (*Empty, error)
}

type horizontalPodAutoscalerClient struct {
	cc grpc.ClientConnInterface
}

func NewHorizontalPodAutoscalerClient(cc grpc.ClientConnInterface) HorizontalPodAutoscalerClient {
	return &horizontalPodAutoscalerClient{cc}
}

func (c *horizontalPodAutoscalerClient) Scale(ctx context.Context, in *HpaName, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HorizontalPodAutoscaler_Scale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HorizontalPodAutoscalerServer is the server API for HorizontalPodAutoscaler service.
// All implementations must embed UnimplementedHorizontalPodAutoscalerServer
// for forward compatibility.
type HorizontalPodAutoscalerServer interface {
	Scale(context.Context, *HpaName) (*Empty, error)
	mustEmbedUnimplementedHorizontalPodAutoscalerServer()
}

// UnimplementedHorizontalPodAutoscalerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHorizontalPodAutoscalerServer struct{}

func (UnimplementedHorizontalPodAutoscalerServer) Scale(context.Context, *HpaName) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scale not implemented")
}
func (UnimplementedHorizontalPodAutoscalerServer) mustEmbedUnimplementedHorizontalPodAutoscalerServer() {
}
func (UnimplementedHorizontalPodAutoscalerServer) testEmbeddedByValue() {}

// UnsafeHorizontalPodAutoscalerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HorizontalPodAutoscalerServer will
// result in compilation errors.
type UnsafeHorizontalPodAutoscalerServer interface {
	mustEmbedUnimplementedHorizontalPodAutoscalerServer()
}

func RegisterHorizontalPodAutoscalerServer(s grpc.ServiceRegistrar, srv HorizontalPodAutoscalerServer) {
	// If the following call pancis, it indicates UnimplementedHorizontalPodAutoscalerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HorizontalPodAutoscaler_ServiceDesc, srv)
}

func _HorizontalPodAutoscaler_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HpaName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorizontalPodAutoscalerServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HorizontalPodAutoscaler_Scale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorizontalPodAutoscalerServer).Scale(ctx, req.(*HpaName))
	}
	return interceptor(ctx, in, info, handler)
}

// HorizontalPodAutoscaler_ServiceDesc is the grpc.ServiceDesc for HorizontalPodAutoscaler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HorizontalPodAutoscaler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.HorizontalPodAutoscaler",
	HandlerType: (*HorizontalPodAutoscalerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scale",
			Handler:    _HorizontalPodAutoscaler_Scale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "horizontalPodAutoscaler.proto",
}
