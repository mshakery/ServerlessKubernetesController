// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: kubelet.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Kubelet_Metric_FullMethodName     = "/kubernetes.Kubelet/Metric"
	Kubelet_RunAPod_FullMethodName    = "/kubernetes.Kubelet/RunAPod"
	Kubelet_DeleteAPod_FullMethodName = "/kubernetes.Kubelet/DeleteAPod"
)

// KubeletClient is the client API for Kubelet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeletClient interface {
	Metric(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeMetrics, error)
	RunAPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*Empty, error)
	DeleteAPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*Empty, error)
}

type kubeletClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeletClient(cc grpc.ClientConnInterface) KubeletClient {
	return &kubeletClient{cc}
}

func (c *kubeletClient) Metric(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeMetrics)
	err := c.cc.Invoke(ctx, Kubelet_Metric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeletClient) RunAPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Kubelet_RunAPod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeletClient) DeleteAPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Kubelet_DeleteAPod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeletServer is the server API for Kubelet service.
// All implementations must embed UnimplementedKubeletServer
// for forward compatibility.
type KubeletServer interface {
	Metric(context.Context, *Empty) (*NodeMetrics, error)
	RunAPod(context.Context, *Pod) (*Empty, error)
	DeleteAPod(context.Context, *Pod) (*Empty, error)
	mustEmbedUnimplementedKubeletServer()
}

// UnimplementedKubeletServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKubeletServer struct{}

func (UnimplementedKubeletServer) Metric(context.Context, *Empty) (*NodeMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metric not implemented")
}
func (UnimplementedKubeletServer) RunAPod(context.Context, *Pod) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAPod not implemented")
}
func (UnimplementedKubeletServer) DeleteAPod(context.Context, *Pod) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPod not implemented")
}
func (UnimplementedKubeletServer) mustEmbedUnimplementedKubeletServer() {}
func (UnimplementedKubeletServer) testEmbeddedByValue()                 {}

// UnsafeKubeletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeletServer will
// result in compilation errors.
type UnsafeKubeletServer interface {
	mustEmbedUnimplementedKubeletServer()
}

func RegisterKubeletServer(s grpc.ServiceRegistrar, srv KubeletServer) {
	// If the following call pancis, it indicates UnimplementedKubeletServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Kubelet_ServiceDesc, srv)
}

func _Kubelet_Metric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeletServer).Metric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kubelet_Metric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeletServer).Metric(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubelet_RunAPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeletServer).RunAPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kubelet_RunAPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeletServer).RunAPod(ctx, req.(*Pod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubelet_DeleteAPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeletServer).DeleteAPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kubelet_DeleteAPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeletServer).DeleteAPod(ctx, req.(*Pod))
	}
	return interceptor(ctx, in, info, handler)
}

// Kubelet_ServiceDesc is the grpc.ServiceDesc for Kubelet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kubelet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.Kubelet",
	HandlerType: (*KubeletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metric",
			Handler:    _Kubelet_Metric_Handler,
		},
		{
			MethodName: "RunAPod",
			Handler:    _Kubelet_RunAPod_Handler,
		},
		{
			MethodName: "DeleteAPod",
			Handler:    _Kubelet_DeleteAPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubelet.proto",
}
